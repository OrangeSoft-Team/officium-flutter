// Mocks generated by Mockito 5.0.12 from annotations
// in officium_flutter/test/infraestructura/autentificacion/fuentes/autentificacion_firebase_fuente_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;
import 'dart:convert' as _i3;
import 'dart:io' as _i2;

import 'package:dartz/dartz.dart' as _i10;
import 'package:firebase_auth/firebase_auth.dart' as _i7;
import 'package:firebase_auth_platform_interface/firebase_auth_platform_interface.dart'
    as _i6;
import 'package:firebase_core/firebase_core.dart' as _i5;
import 'package:flutter_secure_storage/flutter_secure_storage.dart' as _i9;
import 'package:google_sign_in/google_sign_in.dart' as _i8;
import 'package:google_sign_in_platform_interface/google_sign_in_platform_interface.dart'
    as _i11;
import 'package:mockito/mockito.dart' as _i1;
import 'package:officium_flutter/infraestructura/comun/local_storage/fuentes/fuente_local.dart'
    as _i12;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeDuration extends _i1.Fake implements Duration {}

class _FakeHttpClientRequest extends _i1.Fake implements _i2.HttpClientRequest {
}

class _FakeUri extends _i1.Fake implements Uri {}

class _FakeHttpHeaders extends _i1.Fake implements _i2.HttpHeaders {}

class _FakeHttpClientResponse extends _i1.Fake
    implements _i2.HttpClientResponse {}

class _FakeEncoding extends _i1.Fake implements _i3.Encoding {}

class _FakeSocket extends _i1.Fake implements _i2.Socket {}

class _FakeStreamSubscription<T> extends _i1.Fake
    implements _i4.StreamSubscription<T> {}

class _FakeFirebaseApp extends _i1.Fake implements _i5.FirebaseApp {}

class _FakeActionCodeInfo extends _i1.Fake implements _i6.ActionCodeInfo {}

class _FakeUserCredential extends _i1.Fake implements _i7.UserCredential {}

class _FakeConfirmationResult extends _i1.Fake
    implements _i7.ConfirmationResult {}

class _FakeGoogleSignInAuthentication extends _i1.Fake
    implements _i8.GoogleSignInAuthentication {}

class _FakeUserMetadata extends _i1.Fake implements _i6.UserMetadata {}

class _FakeIdTokenResult extends _i1.Fake implements _i6.IdTokenResult {}

class _FakeUser extends _i1.Fake implements _i7.User {}

class _FakeFlutterSecureStorage extends _i1.Fake
    implements _i9.FlutterSecureStorage {}

class _FakeUnit extends _i1.Fake implements _i10.Unit {}

/// A class which mocks [HttpClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i2.HttpClient {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Duration get idleTimeout =>
      (super.noSuchMethod(Invocation.getter(#idleTimeout),
          returnValue: _FakeDuration()) as Duration);
  @override
  set idleTimeout(Duration? _idleTimeout) =>
      super.noSuchMethod(Invocation.setter(#idleTimeout, _idleTimeout),
          returnValueForMissingStub: null);
  @override
  set connectionTimeout(Duration? _connectionTimeout) => super.noSuchMethod(
      Invocation.setter(#connectionTimeout, _connectionTimeout),
      returnValueForMissingStub: null);
  @override
  set maxConnectionsPerHost(int? _maxConnectionsPerHost) => super.noSuchMethod(
      Invocation.setter(#maxConnectionsPerHost, _maxConnectionsPerHost),
      returnValueForMissingStub: null);
  @override
  bool get autoUncompress => (super
          .noSuchMethod(Invocation.getter(#autoUncompress), returnValue: false)
      as bool);
  @override
  set autoUncompress(bool? _autoUncompress) =>
      super.noSuchMethod(Invocation.setter(#autoUncompress, _autoUncompress),
          returnValueForMissingStub: null);
  @override
  set userAgent(String? _userAgent) =>
      super.noSuchMethod(Invocation.setter(#userAgent, _userAgent),
          returnValueForMissingStub: null);
  @override
  set authenticate(_i4.Future<bool> Function(Uri, String, String?)? f) =>
      super.noSuchMethod(Invocation.setter(#authenticate, f),
          returnValueForMissingStub: null);
  @override
  set findProxy(String Function(Uri)? f) =>
      super.noSuchMethod(Invocation.setter(#findProxy, f),
          returnValueForMissingStub: null);
  @override
  set authenticateProxy(
          _i4.Future<bool> Function(String, int, String, String?)? f) =>
      super.noSuchMethod(Invocation.setter(#authenticateProxy, f),
          returnValueForMissingStub: null);
  @override
  set badCertificateCallback(
          bool Function(_i2.X509Certificate, String, int)? callback) =>
      super.noSuchMethod(Invocation.setter(#badCertificateCallback, callback),
          returnValueForMissingStub: null);
  @override
  _i4.Future<_i2.HttpClientRequest> open(
          String? method, String? host, int? port, String? path) =>
      (super.noSuchMethod(Invocation.method(#open, [method, host, port, path]),
              returnValue:
                  Future<_i2.HttpClientRequest>.value(_FakeHttpClientRequest()))
          as _i4.Future<_i2.HttpClientRequest>);
  @override
  _i4.Future<_i2.HttpClientRequest> openUrl(String? method, Uri? url) =>
      (super.noSuchMethod(Invocation.method(#openUrl, [method, url]),
              returnValue:
                  Future<_i2.HttpClientRequest>.value(_FakeHttpClientRequest()))
          as _i4.Future<_i2.HttpClientRequest>);
  @override
  _i4.Future<_i2.HttpClientRequest> get(
          String? host, int? port, String? path) =>
      (super.noSuchMethod(Invocation.method(#get, [host, port, path]),
              returnValue:
                  Future<_i2.HttpClientRequest>.value(_FakeHttpClientRequest()))
          as _i4.Future<_i2.HttpClientRequest>);
  @override
  _i4.Future<_i2.HttpClientRequest> getUrl(Uri? url) =>
      (super.noSuchMethod(Invocation.method(#getUrl, [url]),
              returnValue:
                  Future<_i2.HttpClientRequest>.value(_FakeHttpClientRequest()))
          as _i4.Future<_i2.HttpClientRequest>);
  @override
  _i4.Future<_i2.HttpClientRequest> post(
          String? host, int? port, String? path) =>
      (super.noSuchMethod(Invocation.method(#post, [host, port, path]),
              returnValue:
                  Future<_i2.HttpClientRequest>.value(_FakeHttpClientRequest()))
          as _i4.Future<_i2.HttpClientRequest>);
  @override
  _i4.Future<_i2.HttpClientRequest> postUrl(Uri? url) =>
      (super.noSuchMethod(Invocation.method(#postUrl, [url]),
              returnValue:
                  Future<_i2.HttpClientRequest>.value(_FakeHttpClientRequest()))
          as _i4.Future<_i2.HttpClientRequest>);
  @override
  _i4.Future<_i2.HttpClientRequest> put(
          String? host, int? port, String? path) =>
      (super.noSuchMethod(Invocation.method(#put, [host, port, path]),
              returnValue:
                  Future<_i2.HttpClientRequest>.value(_FakeHttpClientRequest()))
          as _i4.Future<_i2.HttpClientRequest>);
  @override
  _i4.Future<_i2.HttpClientRequest> putUrl(Uri? url) =>
      (super.noSuchMethod(Invocation.method(#putUrl, [url]),
              returnValue:
                  Future<_i2.HttpClientRequest>.value(_FakeHttpClientRequest()))
          as _i4.Future<_i2.HttpClientRequest>);
  @override
  _i4.Future<_i2.HttpClientRequest> delete(
          String? host, int? port, String? path) =>
      (super.noSuchMethod(Invocation.method(#delete, [host, port, path]),
              returnValue:
                  Future<_i2.HttpClientRequest>.value(_FakeHttpClientRequest()))
          as _i4.Future<_i2.HttpClientRequest>);
  @override
  _i4.Future<_i2.HttpClientRequest> deleteUrl(Uri? url) =>
      (super.noSuchMethod(Invocation.method(#deleteUrl, [url]),
              returnValue:
                  Future<_i2.HttpClientRequest>.value(_FakeHttpClientRequest()))
          as _i4.Future<_i2.HttpClientRequest>);
  @override
  _i4.Future<_i2.HttpClientRequest> patch(
          String? host, int? port, String? path) =>
      (super.noSuchMethod(Invocation.method(#patch, [host, port, path]),
              returnValue:
                  Future<_i2.HttpClientRequest>.value(_FakeHttpClientRequest()))
          as _i4.Future<_i2.HttpClientRequest>);
  @override
  _i4.Future<_i2.HttpClientRequest> patchUrl(Uri? url) =>
      (super.noSuchMethod(Invocation.method(#patchUrl, [url]),
              returnValue:
                  Future<_i2.HttpClientRequest>.value(_FakeHttpClientRequest()))
          as _i4.Future<_i2.HttpClientRequest>);
  @override
  _i4.Future<_i2.HttpClientRequest> head(
          String? host, int? port, String? path) =>
      (super.noSuchMethod(Invocation.method(#head, [host, port, path]),
              returnValue:
                  Future<_i2.HttpClientRequest>.value(_FakeHttpClientRequest()))
          as _i4.Future<_i2.HttpClientRequest>);
  @override
  _i4.Future<_i2.HttpClientRequest> headUrl(Uri? url) =>
      (super.noSuchMethod(Invocation.method(#headUrl, [url]),
              returnValue:
                  Future<_i2.HttpClientRequest>.value(_FakeHttpClientRequest()))
          as _i4.Future<_i2.HttpClientRequest>);
  @override
  void addCredentials(
          Uri? url, String? realm, _i2.HttpClientCredentials? credentials) =>
      super.noSuchMethod(
          Invocation.method(#addCredentials, [url, realm, credentials]),
          returnValueForMissingStub: null);
  @override
  void addProxyCredentials(String? host, int? port, String? realm,
          _i2.HttpClientCredentials? credentials) =>
      super.noSuchMethod(
          Invocation.method(
              #addProxyCredentials, [host, port, realm, credentials]),
          returnValueForMissingStub: null);
  @override
  void close({bool? force = false}) =>
      super.noSuchMethod(Invocation.method(#close, [], {#force: force}),
          returnValueForMissingStub: null);
}

/// A class which mocks [HttpClientRequest].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClientRequest extends _i1.Mock implements _i2.HttpClientRequest {
  MockHttpClientRequest() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get persistentConnection =>
      (super.noSuchMethod(Invocation.getter(#persistentConnection),
          returnValue: false) as bool);
  @override
  set persistentConnection(bool? _persistentConnection) => super.noSuchMethod(
      Invocation.setter(#persistentConnection, _persistentConnection),
      returnValueForMissingStub: null);
  @override
  bool get followRedirects => (super
          .noSuchMethod(Invocation.getter(#followRedirects), returnValue: false)
      as bool);
  @override
  set followRedirects(bool? _followRedirects) =>
      super.noSuchMethod(Invocation.setter(#followRedirects, _followRedirects),
          returnValueForMissingStub: null);
  @override
  int get maxRedirects =>
      (super.noSuchMethod(Invocation.getter(#maxRedirects), returnValue: 0)
          as int);
  @override
  set maxRedirects(int? _maxRedirects) =>
      super.noSuchMethod(Invocation.setter(#maxRedirects, _maxRedirects),
          returnValueForMissingStub: null);
  @override
  int get contentLength =>
      (super.noSuchMethod(Invocation.getter(#contentLength), returnValue: 0)
          as int);
  @override
  set contentLength(int? _contentLength) =>
      super.noSuchMethod(Invocation.setter(#contentLength, _contentLength),
          returnValueForMissingStub: null);
  @override
  bool get bufferOutput =>
      (super.noSuchMethod(Invocation.getter(#bufferOutput), returnValue: false)
          as bool);
  @override
  set bufferOutput(bool? _bufferOutput) =>
      super.noSuchMethod(Invocation.setter(#bufferOutput, _bufferOutput),
          returnValueForMissingStub: null);
  @override
  String get method =>
      (super.noSuchMethod(Invocation.getter(#method), returnValue: '')
          as String);
  @override
  Uri get uri =>
      (super.noSuchMethod(Invocation.getter(#uri), returnValue: _FakeUri())
          as Uri);
  @override
  _i2.HttpHeaders get headers =>
      (super.noSuchMethod(Invocation.getter(#headers),
          returnValue: _FakeHttpHeaders()) as _i2.HttpHeaders);
  @override
  List<_i2.Cookie> get cookies =>
      (super.noSuchMethod(Invocation.getter(#cookies),
          returnValue: <_i2.Cookie>[]) as List<_i2.Cookie>);
  @override
  _i4.Future<_i2.HttpClientResponse> get done => (super.noSuchMethod(
          Invocation.getter(#done),
          returnValue:
              Future<_i2.HttpClientResponse>.value(_FakeHttpClientResponse()))
      as _i4.Future<_i2.HttpClientResponse>);
  @override
  _i3.Encoding get encoding => (super.noSuchMethod(Invocation.getter(#encoding),
      returnValue: _FakeEncoding()) as _i3.Encoding);
  @override
  set encoding(_i3.Encoding? _encoding) =>
      super.noSuchMethod(Invocation.setter(#encoding, _encoding),
          returnValueForMissingStub: null);
  @override
  _i4.Future<_i2.HttpClientResponse> close() => (super.noSuchMethod(
          Invocation.method(#close, []),
          returnValue:
              Future<_i2.HttpClientResponse>.value(_FakeHttpClientResponse()))
      as _i4.Future<_i2.HttpClientResponse>);
  @override
  void abort([Object? exception, StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#abort, [exception, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void add(List<int>? data) =>
      super.noSuchMethod(Invocation.method(#add, [data]),
          returnValueForMissingStub: null);
  @override
  void write(Object? object) =>
      super.noSuchMethod(Invocation.method(#write, [object]),
          returnValueForMissingStub: null);
  @override
  void writeAll(Iterable<dynamic>? objects, [String? separator = r'']) =>
      super.noSuchMethod(Invocation.method(#writeAll, [objects, separator]),
          returnValueForMissingStub: null);
  @override
  void writeln([Object? object = r'']) =>
      super.noSuchMethod(Invocation.method(#writeln, [object]),
          returnValueForMissingStub: null);
  @override
  void writeCharCode(int? charCode) =>
      super.noSuchMethod(Invocation.method(#writeCharCode, [charCode]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i4.Future<dynamic> addStream(_i4.Stream<List<int>>? stream) =>
      (super.noSuchMethod(Invocation.method(#addStream, [stream]),
          returnValue: Future<dynamic>.value()) as _i4.Future<dynamic>);
  @override
  _i4.Future<dynamic> flush() =>
      (super.noSuchMethod(Invocation.method(#flush, []),
          returnValue: Future<dynamic>.value()) as _i4.Future<dynamic>);
}

/// A class which mocks [HttpClientResponse].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClientResponse extends _i1.Mock
    implements _i2.HttpClientResponse {
  MockHttpClientResponse() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get statusCode =>
      (super.noSuchMethod(Invocation.getter(#statusCode), returnValue: 0)
          as int);
  @override
  String get reasonPhrase =>
      (super.noSuchMethod(Invocation.getter(#reasonPhrase), returnValue: '')
          as String);
  @override
  int get contentLength =>
      (super.noSuchMethod(Invocation.getter(#contentLength), returnValue: 0)
          as int);
  @override
  _i2.HttpClientResponseCompressionState get compressionState =>
      (super.noSuchMethod(Invocation.getter(#compressionState),
              returnValue: _i2.HttpClientResponseCompressionState.notCompressed)
          as _i2.HttpClientResponseCompressionState);
  @override
  bool get persistentConnection =>
      (super.noSuchMethod(Invocation.getter(#persistentConnection),
          returnValue: false) as bool);
  @override
  bool get isRedirect =>
      (super.noSuchMethod(Invocation.getter(#isRedirect), returnValue: false)
          as bool);
  @override
  List<_i2.RedirectInfo> get redirects =>
      (super.noSuchMethod(Invocation.getter(#redirects),
          returnValue: <_i2.RedirectInfo>[]) as List<_i2.RedirectInfo>);
  @override
  _i2.HttpHeaders get headers =>
      (super.noSuchMethod(Invocation.getter(#headers),
          returnValue: _FakeHttpHeaders()) as _i2.HttpHeaders);
  @override
  List<_i2.Cookie> get cookies =>
      (super.noSuchMethod(Invocation.getter(#cookies),
          returnValue: <_i2.Cookie>[]) as List<_i2.Cookie>);
  @override
  bool get isBroadcast =>
      (super.noSuchMethod(Invocation.getter(#isBroadcast), returnValue: false)
          as bool);
  @override
  _i4.Future<int> get length => (super.noSuchMethod(Invocation.getter(#length),
      returnValue: Future<int>.value(0)) as _i4.Future<int>);
  @override
  _i4.Future<bool> get isEmpty =>
      (super.noSuchMethod(Invocation.getter(#isEmpty),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<List<int>> get first => (super.noSuchMethod(
      Invocation.getter(#first),
      returnValue: Future<List<int>>.value(<int>[])) as _i4.Future<List<int>>);
  @override
  _i4.Future<List<int>> get last => (super.noSuchMethod(
      Invocation.getter(#last),
      returnValue: Future<List<int>>.value(<int>[])) as _i4.Future<List<int>>);
  @override
  _i4.Future<List<int>> get single => (super.noSuchMethod(
      Invocation.getter(#single),
      returnValue: Future<List<int>>.value(<int>[])) as _i4.Future<List<int>>);
  @override
  _i4.Future<_i2.HttpClientResponse> redirect(
          [String? method, Uri? url, bool? followLoops]) =>
      (super.noSuchMethod(
              Invocation.method(#redirect, [method, url, followLoops]),
              returnValue: Future<_i2.HttpClientResponse>.value(
                  _FakeHttpClientResponse()))
          as _i4.Future<_i2.HttpClientResponse>);
  @override
  _i4.Future<_i2.Socket> detachSocket() =>
      (super.noSuchMethod(Invocation.method(#detachSocket, []),
              returnValue: Future<_i2.Socket>.value(_FakeSocket()))
          as _i4.Future<_i2.Socket>);
  @override
  _i4.Stream<List<int>> asBroadcastStream(
          {void Function(_i4.StreamSubscription<List<int>>)? onListen,
          void Function(_i4.StreamSubscription<List<int>>)? onCancel}) =>
      (super.noSuchMethod(
          Invocation.method(#asBroadcastStream, [],
              {#onListen: onListen, #onCancel: onCancel}),
          returnValue: Stream<List<int>>.empty()) as _i4.Stream<List<int>>);
  @override
  _i4.StreamSubscription<List<int>> listen(void Function(List<int>)? onData,
          {Function? onError, void Function()? onDone, bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue: _FakeStreamSubscription<List<int>>())
          as _i4.StreamSubscription<List<int>>);
  @override
  _i4.Stream<List<int>> where(bool Function(List<int>)? test) =>
      (super.noSuchMethod(Invocation.method(#where, [test]),
          returnValue: Stream<List<int>>.empty()) as _i4.Stream<List<int>>);
  @override
  _i4.Stream<S> map<S>(S Function(List<int>)? convert) =>
      (super.noSuchMethod(Invocation.method(#map, [convert]),
          returnValue: Stream<S>.empty()) as _i4.Stream<S>);
  @override
  _i4.Stream<E> asyncMap<E>(_i4.FutureOr<E>? Function(List<int>)? convert) =>
      (super.noSuchMethod(Invocation.method(#asyncMap, [convert]),
          returnValue: Stream<E>.empty()) as _i4.Stream<E>);
  @override
  _i4.Stream<E> asyncExpand<E>(_i4.Stream<E>? Function(List<int>)? convert) =>
      (super.noSuchMethod(Invocation.method(#asyncExpand, [convert]),
          returnValue: Stream<E>.empty()) as _i4.Stream<E>);
  @override
  _i4.Stream<List<int>> handleError(Function? onError,
          {bool Function(dynamic)? test}) =>
      (super.noSuchMethod(
          Invocation.method(#handleError, [onError], {#test: test}),
          returnValue: Stream<List<int>>.empty()) as _i4.Stream<List<int>>);
  @override
  _i4.Stream<S> expand<S>(Iterable<S> Function(List<int>)? convert) =>
      (super.noSuchMethod(Invocation.method(#expand, [convert]),
          returnValue: Stream<S>.empty()) as _i4.Stream<S>);
  @override
  _i4.Future<dynamic> pipe(_i4.StreamConsumer<List<int>>? streamConsumer) =>
      (super.noSuchMethod(Invocation.method(#pipe, [streamConsumer]),
          returnValue: Future<dynamic>.value()) as _i4.Future<dynamic>);
  @override
  _i4.Stream<S> transform<S>(
          _i4.StreamTransformer<List<int>, S>? streamTransformer) =>
      (super.noSuchMethod(Invocation.method(#transform, [streamTransformer]),
          returnValue: Stream<S>.empty()) as _i4.Stream<S>);
  @override
  _i4.Future<List<int>> reduce(
          List<int> Function(List<int>, List<int>)? combine) =>
      (super.noSuchMethod(Invocation.method(#reduce, [combine]),
              returnValue: Future<List<int>>.value(<int>[]))
          as _i4.Future<List<int>>);
  @override
  _i4.Future<S> fold<S>(S? initialValue, S Function(S, List<int>)? combine) =>
      (super.noSuchMethod(Invocation.method(#fold, [initialValue, combine]),
          returnValue: Future<S>.value(null)) as _i4.Future<S>);
  @override
  _i4.Future<String> join([String? separator = r'']) =>
      (super.noSuchMethod(Invocation.method(#join, [separator]),
          returnValue: Future<String>.value('')) as _i4.Future<String>);
  @override
  _i4.Future<bool> contains(Object? needle) =>
      (super.noSuchMethod(Invocation.method(#contains, [needle]),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<dynamic> forEach(void Function(List<int>)? action) =>
      (super.noSuchMethod(Invocation.method(#forEach, [action]),
          returnValue: Future<dynamic>.value()) as _i4.Future<dynamic>);
  @override
  _i4.Future<bool> every(bool Function(List<int>)? test) =>
      (super.noSuchMethod(Invocation.method(#every, [test]),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<bool> any(bool Function(List<int>)? test) =>
      (super.noSuchMethod(Invocation.method(#any, [test]),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Stream<R> cast<R>() => (super.noSuchMethod(Invocation.method(#cast, []),
      returnValue: Stream<R>.empty()) as _i4.Stream<R>);
  @override
  _i4.Future<List<List<int>>> toList() =>
      (super.noSuchMethod(Invocation.method(#toList, []),
              returnValue: Future<List<List<int>>>.value(<List<int>>[]))
          as _i4.Future<List<List<int>>>);
  @override
  _i4.Future<Set<List<int>>> toSet() =>
      (super.noSuchMethod(Invocation.method(#toSet, []),
              returnValue: Future<Set<List<int>>>.value(<List<int>>{}))
          as _i4.Future<Set<List<int>>>);
  @override
  _i4.Future<E> drain<E>([E? futureValue]) =>
      (super.noSuchMethod(Invocation.method(#drain, [futureValue]),
          returnValue: Future<E>.value(null)) as _i4.Future<E>);
  @override
  _i4.Stream<List<int>> take(int? count) =>
      (super.noSuchMethod(Invocation.method(#take, [count]),
          returnValue: Stream<List<int>>.empty()) as _i4.Stream<List<int>>);
  @override
  _i4.Stream<List<int>> takeWhile(bool Function(List<int>)? test) =>
      (super.noSuchMethod(Invocation.method(#takeWhile, [test]),
          returnValue: Stream<List<int>>.empty()) as _i4.Stream<List<int>>);
  @override
  _i4.Stream<List<int>> skip(int? count) =>
      (super.noSuchMethod(Invocation.method(#skip, [count]),
          returnValue: Stream<List<int>>.empty()) as _i4.Stream<List<int>>);
  @override
  _i4.Stream<List<int>> skipWhile(bool Function(List<int>)? test) =>
      (super.noSuchMethod(Invocation.method(#skipWhile, [test]),
          returnValue: Stream<List<int>>.empty()) as _i4.Stream<List<int>>);
  @override
  _i4.Stream<List<int>> distinct(
          [bool Function(List<int>, List<int>)? equals]) =>
      (super.noSuchMethod(Invocation.method(#distinct, [equals]),
          returnValue: Stream<List<int>>.empty()) as _i4.Stream<List<int>>);
  @override
  _i4.Future<List<int>> firstWhere(bool Function(List<int>)? test,
          {List<int> Function()? orElse}) =>
      (super.noSuchMethod(
              Invocation.method(#firstWhere, [test], {#orElse: orElse}),
              returnValue: Future<List<int>>.value(<int>[]))
          as _i4.Future<List<int>>);
  @override
  _i4.Future<List<int>> lastWhere(bool Function(List<int>)? test,
          {List<int> Function()? orElse}) =>
      (super.noSuchMethod(
              Invocation.method(#lastWhere, [test], {#orElse: orElse}),
              returnValue: Future<List<int>>.value(<int>[]))
          as _i4.Future<List<int>>);
  @override
  _i4.Future<List<int>> singleWhere(bool Function(List<int>)? test,
          {List<int> Function()? orElse}) =>
      (super.noSuchMethod(
              Invocation.method(#singleWhere, [test], {#orElse: orElse}),
              returnValue: Future<List<int>>.value(<int>[]))
          as _i4.Future<List<int>>);
  @override
  _i4.Future<List<int>> elementAt(int? index) => (super.noSuchMethod(
      Invocation.method(#elementAt, [index]),
      returnValue: Future<List<int>>.value(<int>[])) as _i4.Future<List<int>>);
  @override
  _i4.Stream<List<int>> timeout(Duration? timeLimit,
          {void Function(_i4.EventSink<List<int>>)? onTimeout}) =>
      (super.noSuchMethod(
          Invocation.method(#timeout, [timeLimit], {#onTimeout: onTimeout}),
          returnValue: Stream<List<int>>.empty()) as _i4.Stream<List<int>>);
}

/// A class which mocks [HttpHeaders].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpHeaders extends _i1.Mock implements _i2.HttpHeaders {
  MockHttpHeaders() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set date(DateTime? _date) =>
      super.noSuchMethod(Invocation.setter(#date, _date),
          returnValueForMissingStub: null);
  @override
  set expires(DateTime? _expires) =>
      super.noSuchMethod(Invocation.setter(#expires, _expires),
          returnValueForMissingStub: null);
  @override
  set ifModifiedSince(DateTime? _ifModifiedSince) =>
      super.noSuchMethod(Invocation.setter(#ifModifiedSince, _ifModifiedSince),
          returnValueForMissingStub: null);
  @override
  set host(String? _host) => super.noSuchMethod(Invocation.setter(#host, _host),
      returnValueForMissingStub: null);
  @override
  set port(int? _port) => super.noSuchMethod(Invocation.setter(#port, _port),
      returnValueForMissingStub: null);
  @override
  set contentType(_i2.ContentType? _contentType) =>
      super.noSuchMethod(Invocation.setter(#contentType, _contentType),
          returnValueForMissingStub: null);
  @override
  int get contentLength =>
      (super.noSuchMethod(Invocation.getter(#contentLength), returnValue: 0)
          as int);
  @override
  set contentLength(int? _contentLength) =>
      super.noSuchMethod(Invocation.setter(#contentLength, _contentLength),
          returnValueForMissingStub: null);
  @override
  bool get persistentConnection =>
      (super.noSuchMethod(Invocation.getter(#persistentConnection),
          returnValue: false) as bool);
  @override
  set persistentConnection(bool? _persistentConnection) => super.noSuchMethod(
      Invocation.setter(#persistentConnection, _persistentConnection),
      returnValueForMissingStub: null);
  @override
  bool get chunkedTransferEncoding =>
      (super.noSuchMethod(Invocation.getter(#chunkedTransferEncoding),
          returnValue: false) as bool);
  @override
  set chunkedTransferEncoding(bool? _chunkedTransferEncoding) =>
      super.noSuchMethod(
          Invocation.setter(#chunkedTransferEncoding, _chunkedTransferEncoding),
          returnValueForMissingStub: null);
  @override
  List<String>? operator [](String? name) =>
      (super.noSuchMethod(Invocation.method(#[], [name])) as List<String>?);
  @override
  String? value(String? name) =>
      (super.noSuchMethod(Invocation.method(#value, [name])) as String?);
  @override
  void add(String? name, Object? value, {bool? preserveHeaderCase = false}) =>
      super.noSuchMethod(
          Invocation.method(
              #add, [name, value], {#preserveHeaderCase: preserveHeaderCase}),
          returnValueForMissingStub: null);
  @override
  void set(String? name, Object? value, {bool? preserveHeaderCase = false}) =>
      super.noSuchMethod(
          Invocation.method(
              #set, [name, value], {#preserveHeaderCase: preserveHeaderCase}),
          returnValueForMissingStub: null);
  @override
  void remove(String? name, Object? value) =>
      super.noSuchMethod(Invocation.method(#remove, [name, value]),
          returnValueForMissingStub: null);
  @override
  void removeAll(String? name) =>
      super.noSuchMethod(Invocation.method(#removeAll, [name]),
          returnValueForMissingStub: null);
  @override
  void forEach(void Function(String, List<String>)? action) =>
      super.noSuchMethod(Invocation.method(#forEach, [action]),
          returnValueForMissingStub: null);
  @override
  void noFolding(String? name) =>
      super.noSuchMethod(Invocation.method(#noFolding, [name]),
          returnValueForMissingStub: null);
  @override
  void clear() => super.noSuchMethod(Invocation.method(#clear, []),
      returnValueForMissingStub: null);
}

/// A class which mocks [FirebaseAuth].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseAuth extends _i1.Mock implements _i7.FirebaseAuth {
  MockFirebaseAuth() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.FirebaseApp get app => (super.noSuchMethod(Invocation.getter(#app),
      returnValue: _FakeFirebaseApp()) as _i5.FirebaseApp);
  @override
  set app(_i5.FirebaseApp? _app) =>
      super.noSuchMethod(Invocation.setter(#app, _app),
          returnValueForMissingStub: null);
  @override
  set tenantId(String? tenantId) =>
      super.noSuchMethod(Invocation.setter(#tenantId, tenantId),
          returnValueForMissingStub: null);
  @override
  Map<dynamic, dynamic> get pluginConstants =>
      (super.noSuchMethod(Invocation.getter(#pluginConstants),
          returnValue: <dynamic, dynamic>{}) as Map<dynamic, dynamic>);
  @override
  _i4.Future<void> useEmulator(String? origin) =>
      (super.noSuchMethod(Invocation.method(#useEmulator, [origin]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> useAuthEmulator(String? host, int? port) =>
      (super.noSuchMethod(Invocation.method(#useAuthEmulator, [host, port]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> applyActionCode(String? code) =>
      (super.noSuchMethod(Invocation.method(#applyActionCode, [code]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<_i6.ActionCodeInfo> checkActionCode(String? code) =>
      (super.noSuchMethod(Invocation.method(#checkActionCode, [code]),
              returnValue:
                  Future<_i6.ActionCodeInfo>.value(_FakeActionCodeInfo()))
          as _i4.Future<_i6.ActionCodeInfo>);
  @override
  _i4.Future<void> confirmPasswordReset({String? code, String? newPassword}) =>
      (super.noSuchMethod(
          Invocation.method(#confirmPasswordReset, [],
              {#code: code, #newPassword: newPassword}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<_i7.UserCredential> createUserWithEmailAndPassword(
          {String? email, String? password}) =>
      (super.noSuchMethod(
              Invocation.method(#createUserWithEmailAndPassword, [],
                  {#email: email, #password: password}),
              returnValue:
                  Future<_i7.UserCredential>.value(_FakeUserCredential()))
          as _i4.Future<_i7.UserCredential>);
  @override
  _i4.Future<List<String>> fetchSignInMethodsForEmail(String? email) => (super
          .noSuchMethod(Invocation.method(#fetchSignInMethodsForEmail, [email]),
              returnValue: Future<List<String>>.value(<String>[]))
      as _i4.Future<List<String>>);
  @override
  _i4.Future<_i7.UserCredential> getRedirectResult() => (super.noSuchMethod(
          Invocation.method(#getRedirectResult, []),
          returnValue: Future<_i7.UserCredential>.value(_FakeUserCredential()))
      as _i4.Future<_i7.UserCredential>);
  @override
  bool isSignInWithEmailLink(String? emailLink) => (super.noSuchMethod(
      Invocation.method(#isSignInWithEmailLink, [emailLink]),
      returnValue: false) as bool);
  @override
  _i4.Stream<_i7.User?> authStateChanges() =>
      (super.noSuchMethod(Invocation.method(#authStateChanges, []),
          returnValue: Stream<_i7.User?>.empty()) as _i4.Stream<_i7.User?>);
  @override
  _i4.Stream<_i7.User?> idTokenChanges() =>
      (super.noSuchMethod(Invocation.method(#idTokenChanges, []),
          returnValue: Stream<_i7.User?>.empty()) as _i4.Stream<_i7.User?>);
  @override
  _i4.Stream<_i7.User?> userChanges() =>
      (super.noSuchMethod(Invocation.method(#userChanges, []),
          returnValue: Stream<_i7.User?>.empty()) as _i4.Stream<_i7.User?>);
  @override
  _i4.Future<void> sendPasswordResetEmail(
          {String? email, _i6.ActionCodeSettings? actionCodeSettings}) =>
      (super.noSuchMethod(
          Invocation.method(#sendPasswordResetEmail, [],
              {#email: email, #actionCodeSettings: actionCodeSettings}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> sendSignInLinkToEmail(
          {String? email, _i6.ActionCodeSettings? actionCodeSettings}) =>
      (super.noSuchMethod(
          Invocation.method(#sendSignInLinkToEmail, [],
              {#email: email, #actionCodeSettings: actionCodeSettings}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> setLanguageCode(String? languageCode) =>
      (super.noSuchMethod(Invocation.method(#setLanguageCode, [languageCode]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> setSettings(
          {bool? appVerificationDisabledForTesting,
          String? userAccessGroup,
          String? phoneNumber,
          String? smsCode,
          bool? forceRecaptchaFlow}) =>
      (super.noSuchMethod(
          Invocation.method(#setSettings, [], {
            #appVerificationDisabledForTesting:
                appVerificationDisabledForTesting,
            #userAccessGroup: userAccessGroup,
            #phoneNumber: phoneNumber,
            #smsCode: smsCode,
            #forceRecaptchaFlow: forceRecaptchaFlow
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> setPersistence(_i6.Persistence? persistence) =>
      (super.noSuchMethod(Invocation.method(#setPersistence, [persistence]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<_i7.UserCredential> signInAnonymously() => (super.noSuchMethod(
          Invocation.method(#signInAnonymously, []),
          returnValue: Future<_i7.UserCredential>.value(_FakeUserCredential()))
      as _i4.Future<_i7.UserCredential>);
  @override
  _i4.Future<_i7.UserCredential> signInWithCredential(
          _i6.AuthCredential? credential) =>
      (super.noSuchMethod(
              Invocation.method(#signInWithCredential, [credential]),
              returnValue:
                  Future<_i7.UserCredential>.value(_FakeUserCredential()))
          as _i4.Future<_i7.UserCredential>);
  @override
  _i4.Future<_i7.UserCredential> signInWithCustomToken(String? token) =>
      (super.noSuchMethod(Invocation.method(#signInWithCustomToken, [token]),
              returnValue:
                  Future<_i7.UserCredential>.value(_FakeUserCredential()))
          as _i4.Future<_i7.UserCredential>);
  @override
  _i4.Future<_i7.UserCredential> signInWithEmailAndPassword(
          {String? email, String? password}) =>
      (super.noSuchMethod(
              Invocation.method(#signInWithEmailAndPassword, [],
                  {#email: email, #password: password}),
              returnValue:
                  Future<_i7.UserCredential>.value(_FakeUserCredential()))
          as _i4.Future<_i7.UserCredential>);
  @override
  _i4.Future<_i7.UserCredential> signInWithEmailLink(
          {String? email, String? emailLink}) =>
      (super.noSuchMethod(
          Invocation.method(
              #signInWithEmailLink, [], {#email: email, #emailLink: emailLink}),
          returnValue:
              Future<_i7.UserCredential>.value(_FakeUserCredential())) as _i4
          .Future<_i7.UserCredential>);
  @override
  _i4.Future<_i7.ConfirmationResult> signInWithPhoneNumber(String? phoneNumber,
          [_i7.RecaptchaVerifier? verifier]) =>
      (super.noSuchMethod(
          Invocation.method(#signInWithPhoneNumber, [phoneNumber, verifier]),
          returnValue: Future<_i7.ConfirmationResult>.value(
              _FakeConfirmationResult())) as _i4
          .Future<_i7.ConfirmationResult>);
  @override
  _i4.Future<_i7.UserCredential> signInWithPopup(_i6.AuthProvider? provider) =>
      (super.noSuchMethod(Invocation.method(#signInWithPopup, [provider]),
              returnValue:
                  Future<_i7.UserCredential>.value(_FakeUserCredential()))
          as _i4.Future<_i7.UserCredential>);
  @override
  _i4.Future<void> signInWithRedirect(_i6.AuthProvider? provider) =>
      (super.noSuchMethod(Invocation.method(#signInWithRedirect, [provider]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> signOut() =>
      (super.noSuchMethod(Invocation.method(#signOut, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<String> verifyPasswordResetCode(String? code) =>
      (super.noSuchMethod(Invocation.method(#verifyPasswordResetCode, [code]),
          returnValue: Future<String>.value('')) as _i4.Future<String>);
  @override
  _i4.Future<void> verifyPhoneNumber(
          {String? phoneNumber,
          _i6.PhoneVerificationCompleted? verificationCompleted,
          _i6.PhoneVerificationFailed? verificationFailed,
          _i6.PhoneCodeSent? codeSent,
          _i6.PhoneCodeAutoRetrievalTimeout? codeAutoRetrievalTimeout,
          String? autoRetrievedSmsCodeForTesting,
          Duration? timeout = const Duration(seconds: 30),
          int? forceResendingToken}) =>
      (super.noSuchMethod(
          Invocation.method(#verifyPhoneNumber, [], {
            #phoneNumber: phoneNumber,
            #verificationCompleted: verificationCompleted,
            #verificationFailed: verificationFailed,
            #codeSent: codeSent,
            #codeAutoRetrievalTimeout: codeAutoRetrievalTimeout,
            #autoRetrievedSmsCodeForTesting: autoRetrievedSmsCodeForTesting,
            #timeout: timeout,
            #forceResendingToken: forceResendingToken
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [UserCredential].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserCredential extends _i1.Mock implements _i7.UserCredential {
  MockUserCredential() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String toString() => super.toString();
}

/// A class which mocks [AuthCredential].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthCredential extends _i1.Mock implements _i6.AuthCredential {
  MockAuthCredential() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get providerId =>
      (super.noSuchMethod(Invocation.getter(#providerId), returnValue: '')
          as String);
  @override
  String get signInMethod =>
      (super.noSuchMethod(Invocation.getter(#signInMethod), returnValue: '')
          as String);
  @override
  Map<String, dynamic> asMap() =>
      (super.noSuchMethod(Invocation.method(#asMap, []),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [GoogleSignIn].
///
/// See the documentation for Mockito's code generation for more information.
class MockGoogleSignIn extends _i1.Mock implements _i8.GoogleSignIn {
  MockGoogleSignIn() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.SignInOption get signInOption =>
      (super.noSuchMethod(Invocation.getter(#signInOption),
          returnValue: _i11.SignInOption.standard) as _i11.SignInOption);
  @override
  List<String> get scopes =>
      (super.noSuchMethod(Invocation.getter(#scopes), returnValue: <String>[])
          as List<String>);
  @override
  _i4.Stream<_i8.GoogleSignInAccount?> get onCurrentUserChanged =>
      (super.noSuchMethod(Invocation.getter(#onCurrentUserChanged),
              returnValue: Stream<_i8.GoogleSignInAccount?>.empty())
          as _i4.Stream<_i8.GoogleSignInAccount?>);
  @override
  _i4.Future<_i8.GoogleSignInAccount?> signInSilently(
          {bool? suppressErrors = true}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #signInSilently, [], {#suppressErrors: suppressErrors}),
              returnValue: Future<_i8.GoogleSignInAccount?>.value())
          as _i4.Future<_i8.GoogleSignInAccount?>);
  @override
  _i4.Future<bool> isSignedIn() =>
      (super.noSuchMethod(Invocation.method(#isSignedIn, []),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<_i8.GoogleSignInAccount?> signIn() =>
      (super.noSuchMethod(Invocation.method(#signIn, []),
              returnValue: Future<_i8.GoogleSignInAccount?>.value())
          as _i4.Future<_i8.GoogleSignInAccount?>);
  @override
  _i4.Future<_i8.GoogleSignInAccount?> signOut() =>
      (super.noSuchMethod(Invocation.method(#signOut, []),
              returnValue: Future<_i8.GoogleSignInAccount?>.value())
          as _i4.Future<_i8.GoogleSignInAccount?>);
  @override
  _i4.Future<_i8.GoogleSignInAccount?> disconnect() =>
      (super.noSuchMethod(Invocation.method(#disconnect, []),
              returnValue: Future<_i8.GoogleSignInAccount?>.value())
          as _i4.Future<_i8.GoogleSignInAccount?>);
  @override
  _i4.Future<bool> requestScopes(List<String>? scopes) =>
      (super.noSuchMethod(Invocation.method(#requestScopes, [scopes]),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
}

/// A class which mocks [GoogleSignInAccount].
///
/// See the documentation for Mockito's code generation for more information.
class MockGoogleSignInAccount extends _i1.Mock
    implements _i8.GoogleSignInAccount {
  MockGoogleSignInAccount() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get email =>
      (super.noSuchMethod(Invocation.getter(#email), returnValue: '')
          as String);
  @override
  String get id =>
      (super.noSuchMethod(Invocation.getter(#id), returnValue: '') as String);
  @override
  _i4.Future<_i8.GoogleSignInAuthentication> get authentication =>
      (super.noSuchMethod(Invocation.getter(#authentication),
              returnValue: Future<_i8.GoogleSignInAuthentication>.value(
                  _FakeGoogleSignInAuthentication()))
          as _i4.Future<_i8.GoogleSignInAuthentication>);
  @override
  _i4.Future<Map<String, String>> get authHeaders => (super.noSuchMethod(
          Invocation.getter(#authHeaders),
          returnValue: Future<Map<String, String>>.value(<String, String>{}))
      as _i4.Future<Map<String, String>>);
  @override
  _i4.Future<void> clearAuthCache() =>
      (super.noSuchMethod(Invocation.method(#clearAuthCache, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [GoogleSignInAuthentication].
///
/// See the documentation for Mockito's code generation for more information.
class MockGoogleSignInAuthentication extends _i1.Mock
    implements _i8.GoogleSignInAuthentication {
  MockGoogleSignInAuthentication() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String toString() => super.toString();
}

/// A class which mocks [User].
///
/// See the documentation for Mockito's code generation for more information.
class MockUser extends _i1.Mock implements _i7.User {
  MockUser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get emailVerified =>
      (super.noSuchMethod(Invocation.getter(#emailVerified), returnValue: false)
          as bool);
  @override
  bool get isAnonymous =>
      (super.noSuchMethod(Invocation.getter(#isAnonymous), returnValue: false)
          as bool);
  @override
  _i6.UserMetadata get metadata =>
      (super.noSuchMethod(Invocation.getter(#metadata),
          returnValue: _FakeUserMetadata()) as _i6.UserMetadata);
  @override
  List<_i6.UserInfo> get providerData =>
      (super.noSuchMethod(Invocation.getter(#providerData),
          returnValue: <_i6.UserInfo>[]) as List<_i6.UserInfo>);
  @override
  String get uid =>
      (super.noSuchMethod(Invocation.getter(#uid), returnValue: '') as String);
  @override
  _i4.Future<void> delete() =>
      (super.noSuchMethod(Invocation.method(#delete, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<String> getIdToken([bool? forceRefresh = false]) =>
      (super.noSuchMethod(Invocation.method(#getIdToken, [forceRefresh]),
          returnValue: Future<String>.value('')) as _i4.Future<String>);
  @override
  _i4.Future<_i6.IdTokenResult> getIdTokenResult(
          [bool? forceRefresh = false]) =>
      (super.noSuchMethod(Invocation.method(#getIdTokenResult, [forceRefresh]),
              returnValue:
                  Future<_i6.IdTokenResult>.value(_FakeIdTokenResult()))
          as _i4.Future<_i6.IdTokenResult>);
  @override
  _i4.Future<_i7.UserCredential> linkWithCredential(
          _i6.AuthCredential? credential) =>
      (super.noSuchMethod(Invocation.method(#linkWithCredential, [credential]),
              returnValue:
                  Future<_i7.UserCredential>.value(_FakeUserCredential()))
          as _i4.Future<_i7.UserCredential>);
  @override
  _i4.Future<_i7.ConfirmationResult> linkWithPhoneNumber(String? phoneNumber,
          [_i7.RecaptchaVerifier? verifier]) =>
      (super.noSuchMethod(
              Invocation.method(#linkWithPhoneNumber, [phoneNumber, verifier]),
              returnValue: Future<_i7.ConfirmationResult>.value(
                  _FakeConfirmationResult()))
          as _i4.Future<_i7.ConfirmationResult>);
  @override
  _i4.Future<_i7.UserCredential> reauthenticateWithCredential(
          _i6.AuthCredential? credential) =>
      (super.noSuchMethod(
              Invocation.method(#reauthenticateWithCredential, [credential]),
              returnValue:
                  Future<_i7.UserCredential>.value(_FakeUserCredential()))
          as _i4.Future<_i7.UserCredential>);
  @override
  _i4.Future<void> reload() =>
      (super.noSuchMethod(Invocation.method(#reload, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> sendEmailVerification(
          [_i6.ActionCodeSettings? actionCodeSettings]) =>
      (super.noSuchMethod(
          Invocation.method(#sendEmailVerification, [actionCodeSettings]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<_i7.User> unlink(String? providerId) =>
      (super.noSuchMethod(Invocation.method(#unlink, [providerId]),
              returnValue: Future<_i7.User>.value(_FakeUser()))
          as _i4.Future<_i7.User>);
  @override
  _i4.Future<void> updateEmail(String? newEmail) =>
      (super.noSuchMethod(Invocation.method(#updateEmail, [newEmail]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> updatePassword(String? newPassword) =>
      (super.noSuchMethod(Invocation.method(#updatePassword, [newPassword]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> updatePhoneNumber(
          _i6.PhoneAuthCredential? phoneCredential) =>
      (super.noSuchMethod(
          Invocation.method(#updatePhoneNumber, [phoneCredential]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> updateDisplayName(String? displayName) =>
      (super.noSuchMethod(Invocation.method(#updateDisplayName, [displayName]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> updatePhotoURL(String? photoURL) =>
      (super.noSuchMethod(Invocation.method(#updatePhotoURL, [photoURL]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> updateProfile({String? displayName, String? photoURL}) =>
      (super.noSuchMethod(
          Invocation.method(#updateProfile, [],
              {#displayName: displayName, #photoURL: photoURL}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> verifyBeforeUpdateEmail(String? newEmail,
          [_i6.ActionCodeSettings? actionCodeSettings]) =>
      (super.noSuchMethod(
          Invocation.method(
              #verifyBeforeUpdateEmail, [newEmail, actionCodeSettings]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [FuenteLocal].
///
/// See the documentation for Mockito's code generation for more information.
class MockFuenteLocal extends _i1.Mock implements _i12.FuenteLocal {
  MockFuenteLocal() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.FlutterSecureStorage get storage => (super.noSuchMethod(
      Invocation.getter(#storage),
      returnValue: _FakeFlutterSecureStorage()) as _i9.FlutterSecureStorage);
  @override
  _i4.Future<_i10.Unit> asignarTokenLocal(_i2.Cookie? tokenCookie) =>
      (super.noSuchMethod(Invocation.method(#asignarTokenLocal, [tokenCookie]),
              returnValue: Future<_i10.Unit>.value(_FakeUnit()))
          as _i4.Future<_i10.Unit>);
  @override
  _i4.Future<String> obtenerTokenLocal() =>
      (super.noSuchMethod(Invocation.method(#obtenerTokenLocal, []),
          returnValue: Future<String>.value('')) as _i4.Future<String>);
}
